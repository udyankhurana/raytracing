This is a basic code for Ray-Casting. 
The first version of the code "naivetracer.cpp" is a very basic implementation of a raytracer taking in traingles, their depths and colors and window size and it outputs the resulting image.
The second version "raytracer.cpp" is a modular OOP code for raytracer with 3-d Vector, Ray, Triangle and Sphere classes with all standard operations and intersection tests. It also takes window size and traingle information and outputs an image based on ray-triangle intersections simulating pin-hole camera model (rays have fixed origin). 
Further extended this to abstract classes, inheritance and header files and guards. Also added BVH acceleration structure.
For now, due to specified origin and direction vectors, this code will work for bunny.obj and cow.obj files.

NOTE: Added Mid-Point Algorithm Code and Split BVH classes.

To compile the code: g++ -Ofast raytracer.cpp Source.cpp -lrt
To run the code: ./a.out <inputfilename> <outputfilename> <width> <height>

NOTE:
1. For inputs 'ip1' to 'ip5', outputs are 'op1' to 'op5'.
2. For cow.obj and bunny.obj, outputs are cow.pgm (500x500), cow2.pgm (800x800), bunny.pgm (500x500), bunny2.pgm (800x800)
3. Timing Information for small inputs is in times.txt and for large models is in times_models.txt
